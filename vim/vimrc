" Currently not in use
"set cursorline         " highlight current line
"set autoread           " autoreload the file in Vim if it has been changed outside of Vim
set nocompatible

" enable syntax and plugins for newtr
filetype plugin on
set omnifunc=syntaxcomplete#Complete " Omni completion
syntax enable

" FINDING FILES
set path+=**      " Provides tab-completion  for all file-related tabs
set wildmenu      " Display all matching files when we complete tab
" NOW WE CAN
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" THINGS TO CONSIDER
" - :b lets you autocomplete any open buffer

" SHOWING DOTFILES (NETWR)
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'

" Shortcuts
" Remap keys to navigate better between windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Saving shortcut
nnoremap <C-W> :w <CR>
" Create new split and switch to it.
nnoremap <Leader>w <C-w>v<C-w>l
nnoremap <Leader>s <C-w>s<C-w>j
" Close split
nnoremap <Leader>c <C-w>c

" Plugins
call plug#begin('~/.vim/plugged')

" Plug 'dhruvasagar/vim-table-mode'
" let g:table_mode_corner='|'

Plug 'chriskempson/base16-vim'
" Plug 'wincent/command-t'
" Plug '~/.fzf'
" Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'

" Markdown and pandoc; writing in general
Plug 'godlygeek/tabular'
Plug 'tpope/vim-markdown'
Plug 'sheerun/vim-polyglot'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'reedes/vim-pencil'
Plug 'ferrine/md-img-paste.vim'

Plug 'vim-pandoc/vim-pandoc' 
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'vim-pandoc/vim-pandoc-after'
let g:pandoc#formatting#mode                            = "sA"
let g:pandoc#formatting#smart_autoformat_on_cursormoved = 1
let g:pandoc#folding#level                              = 2
let g:pandoc#folding#mode                               = "relative"
let g:pandoc#after#modules#enabled                      = ["nrrwrgn", "tablemode"]
let g:pandoc#completion#bib#mode                        = 'citeproc'
let g:pandoc#syntax#colorcolumn                         = 0 " was changed!
let g:pandoc#syntax#conceal#use                         = 1
let g:pandoc#syntax#conceal#urls                        = 0
let g:pandoc#syntax#style#emphases                      = 1
let g:pandoc#completion#bib#mode                        = 'citeproc'
let g:pandoc#biblio#bibs                                = ['~/Sync/masterBib.bib'] " For bib file



Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'lervag/vimtex'
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-repeat'
Plug 'elzr/vim-json'

" Vim bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" Plug 'itchyny/lightline.vim'
" let g:lightline = {
      " \ 'colorscheme': 'jellybeans',
      " \ }

" Tmux bar (via Vim)
Plug 'edkolev/tmuxline.vim'

" Vim templates, by Adrian Perez
Plug 'aperezdc/vim-template'
let g:templates_no_autocmd=0
let g:templates_directory=['~/roles/dotfiles/vim/templates']
let g:templates_no_builtin_templates=0
let g:templates_user_variables=[]
let g:templates_search_height=1 " Only search given directory
" let g:templates_plugin_loaded=0






"""""""""""""""""""""""""""""""""""""""""""""""""
" Trying out
Plug 'chrisbra/nrrwrgn'

call plug#end()

syntax on
colorscheme base16-ocean
" colorscheme base16-classic-dark

set t_ut=                " fix 256 colors in tmux http://sunaku.github.io/vim-256color-bce.html

if has("termguicolors")  " set true colors
    let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

if filereadable(expand("~/.vimrc_background"))
  source ~/.vimrc_background
endif

" set background=dark
"colorscheme base16-chalk




" Basic behavior
set number              " show line numbers
set relativenumber      " show relative numbers!
set wrap                " wrap lines
set encoding=utf-8      " set encoding to UTF-8 (default was "latin1")
set mouse=a             " enable mouse support (might not work well on Mac OS X)
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw screen only when we need to
set showmatch           " highlight matching parentheses / brackets [{()}]
set laststatus=2        " always show statusline (even with only single window)
set ruler               " show line and column number of the cursor on right side of statusline
set visualbell          " blink cursor on error, instead of beeping


""""""""""""""""""""""""""
""" Key bindings

" configure other way to escape, as well as leader key
let mapleader=" "
inoremap jk <esc>

" move vertically by visual line (don't skip wrapped lines)
nmap j gj
nmap k gk


""""""""""""""""""""""""""
"""" Vim Appearance

" put colorscheme files in ~/.vim/colors/
" good colorschemes: murphy, slate, molokai, badwolf, solarized

" let base16colorspace=256  " Access colors present in 256 colorspace
" colorscheme badwolf " nord badwolf

" use filetype-based syntax highlighting, ftplugins, and indentation
filetype plugin indent on


""""""""""""""""""""""""""
"""" Tab settings

set tabstop=4           " width that a <TAB> character displays as
set expandtab           " convert <TAB> key-presses to spaces
set shiftwidth=4        " number of spaces to use for each step of (auto)indent
set softtabstop=4       " backspace after pressing <TAB> will remove up to this many spaces

set autoindent          " copy indent from current line when starting a new line
set smartindent         " even better autoindent (e.g. add indent after '{')


""""""""""""""""""""""""""
"""" Search settings

set incsearch           " search as characters are entered
set hlsearch            " highlight matches

" turn off search highlighting with <CR> (carriage-return)
nnoremap <CR> :nohlsearch<CR><CR>




""""""""""""""""""""""""""
""""""""""""""""""""""""""
""" Other behavior

" Tabularize, for LaTeX, with ampersands!
nnoremap <Leader>a :Tabularize /&<CR>
vnoremap <Leader>a :Tabularize /&<CR>


""""""""""""""""""""""""""
" Automatic tabularization, from Tim Pope

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
        let p = '^\s*|\s.*\s|\s*$'
        if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
                let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
                let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
                Tabularize/|/l1
                normal! 0
                call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
        endif
endfunction



""""""""""""""""""""""""""
" Markdown Preview

" Don't close preview tab when switching to other buffers
"let g:mkdp_auto_close = 0

nnoremap <Leader>mm :MarkdownPreview<CR>

""""""""""""""""""""""""""
" fzf
nnoremap <Leader>f :FZF<Enter>

" highlighting off



""""""""""""""""""""""""""
" md image paste

autocmd FileType markdown nmap <silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>
" there are some defaults for image directory and image name, you can change them
let g:mdip_imgdir                      = 'image-assets'
" let g:mdip_imgname                   = 'image'

""""""""""""""""""""""""""
" LaTeX

let g:tex_flavor                       = 'latex'
let g:tex_conceal                      = ''
let g:vimtex_fold_manual               = 1
let g:vimtex_latexmk_continuous        = 1
let g:vimtex_compiler_progname         = 'nvr'
" use SumatraPDF if you are on Windows
let g:vimtex_view_method               = 'skim'

"autocmd FileType tex set autoindent
" Set the make program (rubber)
" autocmd FileType tex set makeprg=rubber\ --inplace\ --maxerr\ 1\ \ --pdf\ --short\ --quiet\ --force\ %
" Mappings for compiling Latex file
" autocmd FileType tex nmap <buffer> <C-T> :!latexmk -pdf %<CR>
" autocmd FileType tex nmap <buffer> <C-T> :!rubber --pdf --force --short %<CR>
" autocmd FileType tex nmap <buffer> T :!open -a Skim %<.pdf %<.pdf<CR><CR>
" autocmd FileType tex nmap <buffer> C :!rubber --clean<CR>


"""""""""""""""""""
" NERDtree
nnoremap <Leader>n :NERDTreeToggle<Enter>
let NERDTreeQuitOnOpen = 1

" automatically close if NERDtree is only left standing
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Turn off auto-insert
augroup auto_comment
    au!
    au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END


" Paste problems in vim
" See: https://www.reddit.com/r/neovim/comments/9ufg11/disable_insert_paste_mode/

" Toggle paste mode on and off
map <leader>tt :setlocal paste!<cr>

" Disable paste mode when leaving insert mode
autocmd InsertLeave * set nopaste

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocommands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Remove trailing whitespace on save.
" autocmd BufWrite * :%s/\s\+$//e

" Skeleton files
autocmd! BufNewFile * silent! 0r ~/.vim/skel/template.%:e

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Snippets
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:UltiSnipsExpandTrigger       = '<tab>'
let g:UltiSnipsJumpForwardTrigger  = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

let g:vimtex_quickfix_mode         = 0
" set conceallevel                   = 1
let g:tex_conceal                  = 'abdmg'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set statusline+=%#warningmsg"#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pencil
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'

augroup pencil
  autocmd!
  autocmd FileType markdown call pencil#init()
  autocmd FileType text     call pencil#init({'wrap': 'hard'})
augroup END

""""""""""""""""""""""""""
" Writing optionS! Goyo, Limelight, and Vim-Pencil

nnoremap <Leader>gg :Goyo<CR>
nnoremap <Leader>pp :TogglePencil<CR>
let g:limelight_conceal_ctermfg = 240
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

 " Pencil / Writing Controls {{{
let g:pencil#wrapModeDefault     = 'soft'
let g:pencil#textwidth           = 75
let g:pencil#joinspaces          = 0
let g:pencil#cursorwrap          = 1
let g:pencil#conceallevel        = 2
let g:pencil#concealcursor       = 'c'
let g:pencil#softDetectSample    = 20
let g:pencil#softDetectThreshold = 130
 " }}}

 " Spell check
 " For those with sadly no function keys available
 " toggle spelling use \s
 nnoremap <Leader>ss :setlocal spell! spelllang=en_us<CR>

" autocmd FileType latex,tex,md,markdown setlocal spell
" set spelllang=en_us ",en_gb
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

" Set spellfile to location that is guaranteed to exist,
" can be symlinked to Dropbox or kept in Git
" and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=~/roles/dotfiles/vim/vim-spell-en.utf-8.add

 nmap <Leader>hh :if exists("g:syntax_on") <Bar>
	\   syntax off <Bar>
	\ else <Bar>
	\   syntax enable <Bar>
	\ endif <CR>

 " Stop the damned highlighting which is left in the register!
 nnoremap <Leader>h :let @/=""<CR>
